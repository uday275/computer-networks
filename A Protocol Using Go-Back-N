#define MAX_SEQ 7

typedef enum { frame_arrival, cksum_err, timeout, network_layer_ready } event_type;

static boolean between(seq_nr a, seq_nr b, seq_nr c) {
    return ((a <= b && b < c) || (c < a && a <= b) || (b < c && c < a));
}

static void send_data(seq_nr frame_nr, seq_nr frame_expected, packet buffer[]) {
    frame s;
    s.info = buffer[frame_nr];
    s.seq = frame_nr;
    s.ack = (frame_expected + MAX_SEQ) % (MAX_SEQ + 1); // Piggyback ACK
    to_physical_layer(&s);
    start_timer(frame_nr);
}

void protocol5(void) {
    seq_nr next_frame_to_send = 0;
    seq_nr ack_expected = 0;
    seq_nr frame_expected = 0;
    frame r;
    packet buffer[MAX_SEQ +  1];
    seq_nr nbuffered = 0;
    event_type event;

    enable_network_layer();
    
    while (true) {
        wait_for_event(&event);
        switch(event) {
            case network_layer_ready:
                from_network_layer(&buffer[next_frame_to_send]); // Fetch new packet
                nbuffered++;
                send_data(next_frame_to_send, frame_expected, buffer); // Transmit the frame
                inc(next_frame_to_send);
                break;

            case frame_arrival:
                from_physical_layer(&r);
                if (r.seq == frame_expected) {
                    to_network_layer(&r.info); // Pass packet to network layer
                    inc(frame_expected);
                }
                while (between(ack_expected, r.ack, next_frame_to_send)) {
                    nbuffered--;
                    stop_timer(ack_expected);
                    inc(ack_expected);
                }
                break;

            case cksum_err:
                break;

            case timeout:
                next_frame_to_send = ack_expected; // Retransmit all outstanding frames
                for (seq_nr i = 1; i <= nbuffered; i++) {
                    send_data(next_frame_to_send, frame_expected, buffer); // Resend frame
                    inc(next_frame_to_send);
                }
                break;
        }
        if (nbuffered < MAX_SEQ) {
            enable_network_layer(); // Allow new packets to be sent
        } else {
            disable_network_layer(); // Block new packets
        }
    }
}
