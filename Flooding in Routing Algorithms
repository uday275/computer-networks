#define MAX_NODES 1024 
#define INFINITY 1000000000 

int n, dist[MAX_NODES][MAX_NODES]; 

void shortest_path_flooding(int s, int t, int path[]) { 
    struct state { 
        int predecessor; 
        int length; 
        enum {permanent, tentative} label; 
    } state[MAX_NODES]; 

    int i, k, min; 
    struct state *p; 

    // Initialize all nodes
    for (p = &state[0]; p < &state[n]; p++) { 
        p->predecessor = -1; 
        p->length = INFINITY; 
        p->label = tentative; 
    } 

    // Set target node initial state
    state[t].length = 0; 
    state[t].label = permanent; 
    k = t; 

    do { 
        // Explore adjacent nodes
        for (i = 0; i < n; i++) 
            if (dist[k][i] != 0 && state[i].label == tentative) { 
                if (state[k].length + dist[k][i] < state[i].length) { 
                    state[i].predecessor = k; 
                    state[i].length = state[k].length + dist[k][i]; 
                } 
            } 

        // Find next node to explore
        k = 0; 
        min = INFINITY; 
        for (i = 0; i < n; i++) 
            if (state[i].label == tentative && state[i].length < min) { 
                min = state[i].length; 
                k = i; 
            } 

        // Mark current node as permanent
        state[k].label = permanent; 
    } while (k != s); 

    // Reconstruct path
    i = 0; 
    k = s; 
    do {
        path[i++] = k;
        k = state[k].predecessor; 
    } while (k >= 0); 
}
